<?php
/*
	Plugin Name: Zazzle Store Gallery
	Plugin URI: http://www.wpzazzle.com/
	Description: Easily integrate Zazzle products into your WordPress blog.
	Version: 1.0
	Author: Roman
	Author URI: http://www.wpzazzle.com/
*/

/*	Copyright YEAR  PLUGIN_AUTHOR_NAME  (email : PLUGIN AUTHOR EMAIL)

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

define('ZAZZLE_DIR', plugin_basename(dirname(__FILE__)));
define('ZAZZLE_URLPATH', WP_CONTENT_URL . '/plugins/' . ZAZZLE_DIR);
define('ZAZZLE_DIRPATH', ABSPATH . PLUGINDIR . '/' . ZAZZLE_DIR);
define('ZAZZLE_FEED', 'http://feed.zazzle.com/' . get_option('zazzle_gallery_name') . '/feed');
define('ZAZZLE_BASE', 'http://www.zazzle.com/');
/*
	I know I can't prevent anyone from editing this, and that is why
	it's here in the open. But I ask you, please keep this as it is.
	A small income generated by affiliate sales will help me to keep
	this plugin alive. Thank you for not changing this!
*/
define('ZAZZLE_ASSOCIATE_ID', '238946774077796033');

require_once 'variables.php';
require_once 'lastRSS.php';

// load widget components
if(class_exists('WP_Widget')) {
	require "widget.php";
}

// Configuration screen
add_action('admin_menu', 'zazzle_add_pages');
function zazzle_add_pages() {
	add_options_page('Zazzle Configuration', 'Zazzle', 8, 'wpzazzle.php', 'zazzle_config');
}

// TinyMCE Buttons
add_action('init', 'zazzle_add_tinymce_buttons');
function zazzle_add_tinymce_buttons() {
	// Add only in Rich Editor mode
	if ( get_user_option('rich_editing') == 'true') {
		add_filter('mce_external_plugins', 'add_zazzle_tinymce_plugin', 5);
		add_filter('mce_buttons', 'register_zazzle_button', 5);
	}
}
function add_zazzle_tinymce_plugin($plugin_array) {    
	$plugin_array['zazzle'] = ZAZZLE_URLPATH . '/tinymce/editor_plugin.js';
	return $plugin_array;
}
function register_zazzle_button($buttons) {
	array_push($buttons, 'separator', 'zazzle');
	return $buttons;
}

// Shortcode handlers
add_shortcode('zazzle', 'zazzle_shortcode');
function zazzle_shortcode($atts) {
	$shortcode_atts = shortcode_atts(array(
		rows => 4,
		cols => 4,
	), $atts);

	return fetch_gallery($shortcode_atts);
}

add_action('wp_footer', 'your_function');

function your_function() {
  preg_replace('/(WordPress.?\s+<\/a>)/', 'WordPress</a> and <a href="http://www.babblegoons.com/zazzle/">Zazzle Store Gallery</a> plugin.', $content);
  echo $content;
}


// Add stylesheets to the header
add_action('wp_head', 'zazzle_styles');
function zazzle_styles() {
	echo nl();
	if (get_option('zazzle_theme') && file_exists(ZAZZLE_DIRPATH . '/css/' . get_option('zazzle_theme'))) {
		echo zazzle_stylesheet_link(ZAZZLE_URLPATH . '/css/' . get_option('zazzle_theme'));
	}
	if (file_exists(get_template_directory() . '/zazzle.css')) {
		echo zazzle_stylesheet_link(get_bloginfo('template_directory') . '/zazzle.css');
	}
}
function zazzle_stylesheet_link($url) {
	return tb(1) . sprintf('<link rel="stylesheet zazzle" type="text/css" href="%s" />', $url) . nl();
}

// Initial install default options
register_activation_hook(__FILE__, 'zazzle_install');
function zazzle_install() {
	add_option('zazzle_background_color', 'FFFFFF');
	add_option('zazzle_product_image_size', 'medium');
	add_option('zazzle_theme', 'zazzle.css');
}


function zazzle_config() {
?>
	<div class="wrap">
		<h2><?php _e('General Settings', 'zazzle') ?></h2>
		<form method="post" action="options.php">
			<?php wp_nonce_field('update-options'); ?>
			<table class="form-table">
			
			<tr valign="top">
				<th scope="row"><label for="zazzle_gallery_name"><?php _e('Gallery Name', 'zazzle') ?></label></th>
				<td>
					<input name="zazzle_gallery_name" type="text" id="zazzle_gallery_name" value="<?php form_option('zazzle_gallery_name'); ?>" size="40" />
					<br />
					<?php _e('Gallery name is the part after the slash: http://www.zazzle.com/<em>gallery_name</em>.', 'zazzle') ?>
				</td>
			</tr>
			
			<tr valign="top">
				<th scope="row"><label for="zazzle_product_line"><?php _e('Product Line', 'zazzle') ?></label></th>
				<td>
					<select name="zazzle_product_line" id="zazzle_product_line">
					<option value=""><?php _e('All', 'zazzle') ?></option>
					<option value="">----------</option>
					<?php
						global $zazzle_product_line;
						foreach ($zazzle_product_line as $key => $value) {
							$selected = (get_option('zazzle_product_line') == $key) ? ' selected="selected"' : '';
							echo tb(1) . sprintf('<option value="%s"%s>%s</option>', $key, $selected, __($value, 'zazzle')) . nl();
						}
					?>
					</select>
				</td>
			</tr>
			
			<tr valign="top">
				<th scope="row"><label for="zazzle_background_color"><?php _e('Background Color', 'zazzle') ?></label></th>
				<td>
					<input name="zazzle_background_color" type="text" id="zazzle_background_color" value="<?php form_option('zazzle_background_color'); ?>" size="6" maxlength="6" />
					<br />
					<?php _e('Background color of the product image in HEX without "#".') ?>
				</td>
			</tr>

			<tr valign="top">
				<th scope="row"><label for="zazzle_product_image_size"><?php _e('Product Image Size', 'zazzle') ?></label></th>
				<td>
					<select name="zazzle_product_image_size" id="zazzle_product_image_size">
					<?php
						global $zazzle_product_image_size;
						global $zazzle_product_image_size_pixels;
						foreach ($zazzle_product_image_size as $key => $value) {
							$selected = (get_option('zazzle_product_image_size') == $key) ? ' selected="selected"' : '';
							echo tb(1) . sprintf('<option value="%s"%s>%s (%dpx)</option>', $key, $selected, __($value, 'zazzle'), $zazzle_product_image_size_pixels[$key]) . nl();
						}
					?>
					</select>
				</td>
			</tr>

			<tr valign="top">
				<th scope="row"><label for="zazzle_theme"><?php _e('Theme', 'zazzle') ?></label></th>
				<td>
					<select name="zazzle_theme" id="zazzle_theme">
					<?php
						if ($handle = opendir(ZAZZLE_DIRPATH . '/css')) {
							while (false !== ($file = readdir($handle))) {
								$selected = (get_option('zazzle_theme') == $file) ? ' selected="selected"' : '';
								if (stristr($file, '.css') && substr($file, 0, 1) != '_') {
									echo tb(1) . sprintf('<option value="%s"%s>%s</option>', $file, $selected, zazzle_theme_name($file)) . nl();
								}
							}
							closedir($handle);
						}
					?>
					</select>
				</td>
			</tr>
			</table>
			<input type="hidden" name="action" value="update" />
			<input type="hidden" name="page_options" value="zazzle_gallery_name,zazzle_product_line,zazzle_background_color,zazzle_product_image_size,zazzle_theme" />
			<p class="submit"><input type="submit" name="Submit" value="<?php _e('Save Changes') ?>" /></p>
		</form>
	</div>
<?php
}

function zazzle_theme_name($file) {
	$file = eregi_replace('.css$', '', $file);
	$file = eregi_replace('_+', ' ', $file);
	return ucwords($file);
}

function fetch_gallery($query) {
	$html = '';

	$rss = new lastRSS;
	$rss->CDATA = 'content';
	$rss->items_limit = 0;

    $zazzle_product_image_size = !empty($query['isz']) ? $query['isz'] : get_option('zazzle_product_image_size');
    
	$zazzle_query = array(
		// Associate ID
		'at' => ZAZZLE_ASSOCIATE_ID,
		// Query string, for searching text fields.
		'qs' => $query['qs'],
		// Zazzle gallery product line.
		// 'cg' => '',
		// Zazzle product type, the three digit numeric Zazzle product code,
		// such as T-Shirt (235) or Mug (168).
		'pt' => !empty($query['pt']) ? $query['pt'] : get_option('zazzle_product_line'),
		// Sort type; value can be "popularity" or "date_created".
		'st' => $query['st'],
		// Sort period, used for "popularity" sorts,
		// value can be: 0=over the history of the gallery,
		// 1=today, 7=this week, 30=this month.
		'sp' => $query['sp'],
		// Page number, specified the result page on which the feed starts.
		'pg' => $query['pg'],
		// Page size, or the number of products per page.
		'ps' => $query['rows'] * $query['cols'],
		// Feed type, value can be either "rss" or "gb" for
		// RSS or Google Base. If not specified, defaults to RSS.
		'ft' => 'gb',
		// Image size, the size of the product images in your feed.
		// This parameter may be set to "tiny", "medium", "large", or "huge".
		'isz' => $zazzle_product_image_size,
		// Background color, a string in the form RRGGBB,
		// used as the background color for product images.
		'bg' => !empty($query['bg']) ? $query['bg'] : get_option('zazzle_background_color'),
		// Source
		'src' => 'wordpress',
	);
	
	$html = nl() . tb() . sprintf('<div class="zazzle %s">', $zazzle_product_image_size) . nl();

	$feed_url = ZAZZLE_FEED . '?' . http_build_query($zazzle_query);
	if ($rs = $rss->get($feed_url)) {
		if ($rs['items_count'] > 0) {
			global $zazzle_product_image_size_pixels;
			$image_size_pixels = $zazzle_product_image_size_pixels[$zazzle_product_image_size];
			$images_count = 0;
			foreach ($rs as $item => $val) {
				if ($item == 'items') {
					foreach ($val as $index => $value) {
						$link = str_replace('&amp;ZCMP=gbase', '', $value['link']);
						$artist_url = ZAZZLE_BASE . $value['artist'] . '/?rf=' . ZAZZLE_ASSOCIATE_ID;
						$title = strip_tags(urldecode($value['title']));
						$description = zazzle_clean_description($value['description']);

						$html .= tb(1) . sprintf('<div class="zazzleProduct" id="zpid_%s">', $value['g:id']) . nl();
						$html .= tb(2) . sprintf('<div class="zazzleImage"><a href="%s"><img width="%d" height="%d" src="%s" alt="%s" title="%s" /></a></div>', $link, $image_size_pixels, $image_size_pixels, $value['g:image_link'], $title, $description) . nl();
						$html .= tb(2) . '<div class="zazzleProductInfo">' . nl();
						$html .= tb(3) . sprintf('<div class="zazzleTitle"><a href="%s">%s</a></div>', $link, $title) . nl();
						$html .= tb(3) . sprintf('<div class="zazzleDescription">%s</div>', $description) . nl();
						$html .= tb(3) . sprintf('<div class="zazzleArtist"><a href="%s">%s</a></div>', $artist_url, $value['artist']) . nl();
						$html .= tb(3) . sprintf('<div class="zazzlePrice">$%s</div>', $value['g:price']) . nl();
						$html .= tb(2) . '</div>' . nl();
						$html .= tb(1) . '</div>' . nl();

						$images_count++;
						if ($images_count == $query['cols']) {
							$html .= nl() . tb(1) . '<br class="zazzleClear">' . nl(2);
							$images_count = 0;
						}
					}
				}
			}
		}
	} else {
		$html .= __('Server is not responding.', 'zazzle');
	}
	$html .= tb() . '</div>' . nl();
	
	return $html;
}

function tb($num = 0) {
	return str_repeat("\t", $num + 4);
}
function nl($num = 1) {
	return str_repeat("\n", $num);
}

function zazzle_clean_description($description) {
	$description = strip_tags($description, '<b><strong><i><em>');
	$description = preg_replace('/\.\.\./', '... ', $description);
	return $description;
}

?>